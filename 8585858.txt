--getgenv().SecureMode = true

--[[task.spawn(function()
	local vu = game:GetService("VirtualUser")
	game:GetService("Players").LocalPlayer.Idled:connect(function()
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		task.wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	end)
end)]]

local Emojis = {'😱','😔','😱😱','🧐🧐','😨','😡😡','🤨🤨🤨'}

repeat task.wait() until game.Loaded

--// Universal tables
local Noclippedparts = {}
--\\

--// Universal functions
local Noclip = function(character)
	--print('noclipped')
	for i,v in pairs(character:GetDescendants()) do
		--	if not table.find(Noclippedparts,v) then
		if v:IsA('Part') and v.Name ~= 'HumanoidRootPart' then --[[table.insert(Noclippedparts,v)]] v.CanCollide = false
			--end
		end
	end
end
--\\

local Players = game:GetService('Players')
local Player = Players.LocalPlayer
local TweenService = game:GetService("TweenService")

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
	Name = "Main",
	LoadingTitle = game:GetService('Players').LocalPlayer.Name,
	LoadingSubtitle = Emojis[math.random(1,#Emojis)],
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "not noglatheman"
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},
	KeySystem = true, -- Set this to true to use our key system
	KeySettings = {
		Title = game:GetService('Players').LocalPlayer.Name,
		Subtitle = "Key System",
		Note = "cryope",
		FileName = "Key",
		SaveKey = true,
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = "noglatheman"
	}
})

local Tab = Window:CreateTab("Main V 1.45", nil)

if game.PlaceId == 13038830668 then
    
   

local Input = Tab:CreateInput({
		Name = "Village",
		PlaceholderText = "Type your village name (Case sensitive)",
		RemoveTextAfterFocusLost = false,
		Callback = function(Text)
			if Text == "" then
				
				_G.Village = ''
			else
				
				_G.Village = Text
			end
		end,
	})
    
_G.Autofarm = false
_G.Village = ""



local Player = game:GetService('Players').LocalPlayer
local Char = Player.Character
_G.Stop = false




	


--[[game:GetService('Players').PlayerAdded:Connect(function(plr)
	if plr:GetRankInGroup(17256538) > 1 then
		plr:Kick('An admin by the name of '.. plr.Name .. 'Has Joined the server 😨')
	end
end)]]

repeat game:GetService('RunService').PreRender:Wait()
    if Char and Char:FindFirstChild('Input') and Char:FindFirstChild('Input'):FindFirstChild('Fall') then Char:FindFirstChild('Input'):FindFirstChild('Fall'):Destroy() end 
    print(_G.Village)
    if _G.Village ~= '' and workspace.Missions.Water:FindFirstChild(_G.Village) then
       print('yes')
        
local Plants = workspace.Missions.Water[_G.Village].Plants
local Trash = workspace.Missions.Litter[_G.Village].Litter

	if not Player.PlayerGui:FindFirstChild('Countdown') --[[ or Player.PlayerGui:FindFirstChild('MissionText') and Player.PlayerGui:FindFirstChild('MissionText').TextLabel.Text == 'Mission completed.']] and _G.Village ~= '' then
	    print('Loading...')
		Char.HumanoidRootPart.CFrame = workspace.MissionBoard[_G.Village].F.Click.CFrame * CFrame.new(0,0,3)
		fireclickdetector(workspace.MissionBoard[_G.Village].F.Click.ClickDetector)
	end

	for i,v in pairs(Trash:GetChildren()) do
		if v and v:FindFirstChild('Target') then
			if Player.Backpack:FindFirstChild('Broom') then
				Char.Humanoid:EquipTool(Player.Backpack:FindFirstChild('Broom'))
			end
			task.wait(.1)
			Char.HumanoidRootPart.CFrame = v.CFrame
		end
	end

	for i,v in pairs(Plants:GetChildren()) do
		if v and v:FindFirstChild('Target') then
			if Player.Backpack:FindFirstChild('Watering Can') then
				Char.Humanoid:EquipTool(Player.Backpack:FindFirstChild('Watering Can'))
			end
			task.wait(.1)
			Char.HumanoidRootPart.CFrame = v.CFrame
		end
	end
	end

until _G.Stop == true

end


if game.PlaceId == 11360595370 then -- Unordinary

	--// Bool Values
	_G.FarmingMobs = false
	_G.CanFarm = true
	--\\ End of Bool Values

	local Part = nil
	if not workspace:FindFirstChild('PlatFormPart') then
		Part = Instance.new('Part')
		Part.Anchored = true
		Part.Parent = workspace
		Part.Name = 'PlatFormPart'
	else
		Part = workspace:FindFirstChild('PlatFormPart')
	end
	local NPCS = workspace:WaitForChild('Livings')
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local WhitelistedMobs = {'Illumination','Needles'}
	AutoFarmMobs = function(bool)
		local Mob = nil

		if bool == true then
			repeat game:GetService('RunService').RenderStepped:Wait()
				--	task.wait(0.05)
				repeat game:GetService('RunService').RenderStepped:Wait() until Player.Character
				Character = Player.Character

				if Character:FindFirstChild('HumanoidRootPart') and not Character.HumanoidRootPart:FindFirstChildOfClass('BodyVelocity') then Instance.new('BodyVelocity',Character.HumanoidRootPart) end

				if not Player.PlayerGui.Quest.Container.Visible then

					_G.CanFarm = false

					for i,v in pairs(workspace.Quests:GetChildren()) do --// auto quest
						if v.Name == 'Quest Giver' and v:FindFirstChild('BlackLongMaleHair') then

							local goal = {}

							goal.CFrame = v:WaitForChild('HumanoidRootPart').CFrame
							TweenSpeed = (Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude / 7.5

							if (Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude <= 7 then
								local args = {
									[1] = "TakeQuest",
									[2] = workspace.Quests:FindFirstChild("Quest Giver")
								}

								game:GetService("ReplicatedStorage").Events.Quest:InvokeServer(unpack(args))
								_G.CanFarm = true
							end

							TweenService:Create(Character.PrimaryPart, TweenInfo.new(TweenSpeed), goal):Play()
						end
					end --\\


				end
				--// Toggle noclip
				if Character and Character:FindFirstChild('Head') then Noclip(Character) end
				--\\

				--	Part.CFrame = Character.PrimaryPart.CFrame * CFrame.new(0,-2.5,0)
				--Part.Size = Vector3.new(10,1,10)

				if _G.FarmingMobs == true and _G.CanFarm == true then

					local Chance = math.random(1,#WhitelistedMobs)

					if not Mob or Mob and Mob:FindFirstChild('Humanoid') and Mob.Humanoid.Health <= 0.3 then
						for i,v in pairs(NPCS:GetChildren()) do
							if v:FindFirstChild('HumanoidRootPart') and v:FindFirstChild('Humanoid') and string.find(v.Name,WhitelistedMobs[Chance]) and  v.Humanoid.Health > 0 then
								Mob = v
								break
							end
						end
					end

					if Mob and not Mob:FindFirstChild('HumanoidRootPart') then
						for i,v in pairs(NPCS:GetChildren()) do
							if v:FindFirstChild('HumanoidRootPart') and v:FindFirstChild('Humanoid') and  string.find(v.Name,WhitelistedMobs[Chance]) and v.Humanoid.Health > 0 then
								Mob = v
								break
							end
						end
						task.wait(0.12)
					end

					if Mob and Mob.PrimaryPart and Character.PrimaryPart and Mob:FindFirstChild('HumanoidRootPart') then
						local goal = {}

						goal.CFrame = Mob:WaitForChild('HumanoidRootPart').CFrame * CFrame.new(0,0,5)
						TweenSpeed = (Character.PrimaryPart.Position - Mob.PrimaryPart.Position).Magnitude / 7

						if (Character.PrimaryPart.Position - Mob.PrimaryPart.Position).Magnitude <= 10 then

							local args = {
								[1] = "MouseButton1",
								[2] = true
							}

							game:GetService("ReplicatedStorage").Events.RequestEvent:FireServer(unpack(args))

						end

						TweenService:Create(Character.PrimaryPart, TweenInfo.new(TweenSpeed), goal):Play()
					end
				end

			until _G.FarmingMobs == false
		else -- Stop Autofarm
			_G.FarmingMobs = false
			TweenService:Create(Character.PrimaryPart, TweenInfo.new(0), {CFrame = Character.PrimaryPart.CFrame}):Play()
		end

	end

	Rayfield:Notify({ --noti
		Title = "Loaded",
		Content = "Unordinary" .. Emojis[math.random(1,#Emojis)],
		Duration = 3.5,
		Image = nil,
		Actions = { -- Notification Buttons
			Ignore = {
				Name = "Close",
				Callback = function()
				end
			},
		},
	}) -- noti end


	local Section = Tab:CreateSection("Main Features")

	local Button = Tab:CreateButton({
		Name = "Autofarm Mobs",
		Callback = function()
			if _G.FarmingMobs == false then
				_G.FarmingMobs = true

				Rayfield:Notify({ --noti
					Title = "Autofarm",
					Content = "Started Autofarm " .. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

				AutoFarmMobs(true)


			else

				_G.FarmingMobs = false
				AutoFarmMobs(false)

				Rayfield:Notify({ --noti
					Title = "Autofarm",
					Content = "Stopped Autofarm ".. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

			end

		end,
	})


end

if game.PlaceId == 8651781069 or game.PlaceId == 9351498692 then -- VoxlBlade

	--// Bool Values
	_G.FarmingMobs = false
	_G.UseQability = false
	_G.UseRability = false
	_G.SpecialTarget = false
	_G.SpecialTargetName = ''
	--\\ End of Bool Values

	local Part = nil
	if not workspace:FindFirstChild('PlatFormPart') then
		Part = Instance.new('Part')
		Part.Anchored = true
		Part.Parent = workspace
		Part.Name = 'PlatFormPart'
	else
		Part = workspace:FindFirstChild('PlatFormPart')
	end
	local NPCS = workspace:WaitForChild('NPCS')
	local Character = Player.Character or Player.CharacterAdded:Wait()

	AutoFarmMobs = function(bool)
		local Mob = nil

		if bool == true then
			repeat game:GetService('RunService').RenderStepped:Wait()

				repeat game:GetService('RunService').RenderStepped:Wait() until Player.Character
				Character = Player.Character

				--// Equip weapon
				if not Character:FindFirstChild('Sword') then
					game:GetService("ReplicatedStorage").Events.EquipWeapon:InvokeServer()
				end
				--\\

				--// Toggle noclip
				if Character.Torso.CanCollide == true then Noclip(Character) end
				--\\

				Part.CFrame = Character.PrimaryPart.CFrame * CFrame.new(0,-3.5,0)
				Part.Size = Vector3.new(10,1,10)

				if _G.FarmingMobs == true then

					if not _G.SpecialTarget then

						if not Mob then
							for i,v in pairs(NPCS:GetChildren()) do
								if v:FindFirstChild('LinkedModel') then
									Mob = v
									break
								end
							end
						end

						if Mob and not Mob:FindFirstChild('HumanoidRootPart') then
							for i,v in pairs(NPCS:GetChildren()) do
								if v:FindFirstChild('LinkedModel') then
									Mob = v
									break
								end
							end
							task.wait(0.12)
						end

					else

						if not Mob then
							for i,v in pairs(NPCS:GetChildren()) do
								if v:FindFirstChild('LinkedModel') and string.find(v.Name,_G.SpecialTargetName) and v:FindFirstChild('LinkedModel'):FindFirstChild('HumanoidRootPart') then
									Mob = v
									break
								end
							end
						end

						if Mob and not Mob:FindFirstChild('HumanoidRootPart') or Mob and not string.find(Mob.Name,_G.SpecialTargetName) then
							for i,v in pairs(NPCS:GetChildren()) do
								if v:FindFirstChild('LinkedModel') and string.find(v.Name,_G.SpecialTargetName) and v:FindFirstChild('LinkedModel'):FindFirstChild('HumanoidRootPart') then
									Mob = v
									break
								end
							end
							task.wait(0.12)
						end
					end

					if Mob and Mob:FindFirstChild('LinkedModel') and Mob:FindFirstChild('LinkedModel'):FindFirstChild('HumanoidRootPart') then
						Mob = Mob:FindFirstChild('LinkedModel')
					else
						Mob = nil
					end

					if Mob and Mob.PrimaryPart and Character.PrimaryPart and Mob:FindFirstChild('HumanoidRootPart') then
						local goal = {}

						goal.CFrame = Mob:WaitForChild('HumanoidRootPart').CFrame * CFrame.new(0,0,6)
						TweenSpeed = (Character.PrimaryPart.Position - Mob.PrimaryPart.Position).Magnitude / 29

						if (Character.PrimaryPart.Position - Mob.PrimaryPart.Position).Magnitude <= 10 then

							if Mob and Character and (Character.PrimaryPart.Position - Mob.PrimaryPart.Position).Magnitude <= 8 and _G.UseQability then
								game:GetService("ReplicatedStorage").Events.WeaponArt:FireServer()
							end

							if Mob and Character and (Character.PrimaryPart.Position - Mob.PrimaryPart.Position).Magnitude <= 7 then
								if _G.UseRability then
									game:GetService("ReplicatedStorage").Events.Rune:FireServer()
								end
							end
							game:GetService("ReplicatedStorage").Events.SwingSword:FireServer("L")
						end

						TweenService:Create(Character.PrimaryPart, TweenInfo.new(TweenSpeed), goal):Play()
					end
				end

			until _G.FarmingMobs == false
		else -- Stop Autofarm
			_G.FarmingMobs = false
			TweenService:Create(Character.PrimaryPart, TweenInfo.new(0), {CFrame = Character.PrimaryPart.CFrame}):Play()
		end

	end





	Rayfield:Notify({ --noti
		Title = "Loaded",
		Content = "Voxl blade " .. Emojis[math.random(1,#Emojis)],
		Duration = 3.5,
		Image = nil,
		Actions = { -- Notification Buttons
			Ignore = {
				Name = "Close",
				Callback = function()
				end
			},
		},
	}) -- noti end


	local Section = Tab:CreateSection("Main Features")

	local Button = Tab:CreateButton({
		Name = "Autofarm Mobs",
		Callback = function()
			if _G.FarmingMobs == false then
				_G.FarmingMobs = true

				Rayfield:Notify({ --noti
					Title = "Autofarm",
					Content = "Started Autofarm " .. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

				AutoFarmMobs(true)


			else

				_G.FarmingMobs = false
				AutoFarmMobs(false)

				Rayfield:Notify({ --noti
					Title = "Autofarm",
					Content = "Stopped Autofarm ".. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

			end

		end,
	})


	local Button2 = Tab:CreateButton({
		Name = "Auto use Q Ability",
		Callback = function()
			if _G.UseQability == false then
				_G.UseQability = true

				Rayfield:Notify({ --noti
					Title = "AutoFarm",
					Content = "Auto Q Ability Enabled " .. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

			else
				_G.UseQability = false

				Rayfield:Notify({ --noti
					Title = "AutoFarm",
					Content = "Auto Q Ability Disabled " .. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

			end

		end,
	})

	local Input = Tab:CreateInput({
		Name = "Specific Mob",
		PlaceholderText = "Type a mobs name(Leave blank if none)",
		RemoveTextAfterFocusLost = false,
		Callback = function(Text)
			if Text == "" then
				_G.SpecialTarget = false
				_G.SpecialTargetName = ''
			else
				_G.SpecialTarget = true
				_G.SpecialTargetName = Text
			end
		end,
	})

	local Button3 = Tab:CreateButton({
		Name = "Auto use R Ability",
		Callback = function()
			if _G.UseRability == false then
				_G.UseRability = true

				Rayfield:Notify({ --noti
					Title = "AutoFarm",
					Content = "Auto R Ability Enabled " .. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

			else
				_G.UseRability = false

				Rayfield:Notify({ --noti
					Title = "AutoFarm",
					Content = "Auto R Ability Disabled " .. Emojis[math.random(1,#Emojis)],
					Duration = 3.5,
					Image = nil,
					Actions = { -- Notification Buttons
						Ignore = {
							Name = "Close",
							Callback = function()
							end
						},
					},
				}) -- noti end

			end

		end,
	})

	if game.PlaceId ~= 9351498692 then
		local Shrines = {}

		for i,v in pairs(workspace:WaitForChild('Shrines'):GetChildren()) do
			table.insert(Shrines,v.Name)
		end

		workspace:WaitForChild('Shrines').ChildAdded:Connect(function()
			for i,v in pairs(workspace:WaitForChild('Shrines'):GetChildren()) do
				if not table.find(Shrines,v.Name) then
					table.insert(Shrines,v.Name)
				end
			end
		end)


		if game.PlaceId ~= 9351498692 then
			local Dropdown = Tab:CreateDropdown({
				Name = "Shrines",
				Options = Shrines,
				CurrentOption = {"None"},
				MultipleOptions = false,
				Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
				Callback = function(Option)

					Doit()
					-- The function that takes place when the selected option is changed
					-- The variable (Option) is a table of strings for the current selected options
				end,
			})
			local Fix = true

			Doit = function()
				local LastOption = Dropdown.CurrentOption[1]
				if Fix == true then task.delay(1,function() Fix = false end) return end
				if Fix == false then
					if  workspace:WaitForChild('Shrines'):FindFirstChild(Dropdown.CurrentOption[1]) then
						Noclip(Character)
						TweenService:Create(Character.PrimaryPart, TweenInfo.new( (Character.PrimaryPart.Position - workspace:WaitForChild('Shrines'):FindFirstChild(Dropdown.CurrentOption[1]).PrimaryPart.Position).Magnitude / 29), {CFrame = workspace:WaitForChild('Shrines'):FindFirstChild(Dropdown.CurrentOption[1]).PrimaryPart.CFrame}):Play()
						repeat task.wait()
							if Character:FindFirstChild('Torso') then
								if Character.Torso.CanCollide == true then Noclip(Character) end
								Part.CFrame = Character.PrimaryPart.CFrame * CFrame.new(0,-2.5,0)
							end
						until (Character.PrimaryPart.Position - workspace:WaitForChild('Shrines'):FindFirstChild(Dropdown.CurrentOption[1]).PrimaryPart.Position).Magnitude <= 4 or _G.FarmingMobs == true or Dropdown.CurrentOption[1] ~= LastOption
					else
						Rayfield:Notify({ --noti
							Title = "Error",
							Content = Dropdown.CurrentOption[1] .. ' Has not been rendered ' .. Emojis[math.random(0,#Emojis)],
							Duration = 3.5,
							Image = nil,
							Actions = { -- Notification Buttons
								Ignore = {
									Name = "Close",
									Callback = function()
									end
								},
							},
						}) -- noti end
					end
				end
			end
		end
	end

end -- End of VoxlBlade

if not workspace:FindFirstChild('TruthSeeking') and game.PlaceId ~= 9351498692 then
	task.spawn(function()
		local new = Instance.new('Folder',workspace)
		new.Name = 'TruthSeeking'
		local ROTATION_DURATION = 0.6 -- the duration of the rotation in seconds
		local TweenService = game:GetService('TweenService')
		local Character = game:GetService('Players').LocalPlayer.Character or game:GetService('Players').LocalPlayer.CharacterAdded:Wait()
		Character:WaitForChild('HumanoidRootPart')

		local Parts = {}

		for i = 1,10 do
			local part = Instance.new('Part',workspace)
			part.Anchored = true
			part.CanCollide = false
			table.insert(Parts,part)
			part.Shape = Enum.PartType.Ball
			part.Color = Color3.new(0, 0, 0)
			local h = Instance.new('Highlight',part)
			h.OutlineColor = Color3.fromRGB(170, 0, 255)
			h.FillColor = Color3.fromRGB(0,0,0)
			h.FillTransparency = 0
			part.Size = Vector3.new(1,1,1)
		end




		local positions = {
			CFrame.new(math.random(-5,15),math.random(-5,10),math.random(-5,15)),
			CFrame.new(math.random(-5,15),math.random(-5,10),math.random(-5,15))

		}


		local function rotatePart(part, position, angle, duration)

			TweenService:Create(part, TweenInfo.new(duration), {
				CFrame = Character.HumanoidRootPart.CFrame * position * CFrame.Angles(math.rad(angle), 0, 0)
			}):Play()


		end
		repeat task.wait(0.002)
			repeat task.wait() until game:GetService('Players').LocalPlayer.Character

			Character = game:GetService('Players').LocalPlayer.Character
			repeat task.wait() until Character and Character:FindFirstChild('HumanoidRootPart')
			rotatePart(Parts[math.random(1,#Parts)],CFrame.new(math.random(-5,10),math.random(-5,5),math.random(-5,10)),math.random(-360,360),ROTATION_DURATION)
		until nil

	end)
end

Rayfield:LoadConfiguration()